---
# tasks file for Squest

## Create Database secret
- name: "[DATABASE] Create a secrets for mariadb"
  kubernetes.core.k8s:
    definition:
      kind: Secret
      apiVersion: v1
      metadata:
        namespace: '{{ ansible_operator_meta.namespace }}'
        name: '{{ ansible_operator_meta.name }}-mariadb-secret'
      data:
        root-password: "{{ db.root_password | b64encode }}"
        password: "{{ db.password | b64encode }}"

## Create Database Deployment

- name: "[DATABASE] Deploy Database"
  kubernetes.core.k8s:
    state: present
    template:
      path: 'deployments/database.yaml.j2'

## Create Rabbitmq Deployment

- name: "[RABBITMQ] Deploy Rabbitmq"
  kubernetes.core.k8s:
    state: present
    template:
      path: 'deployments/rabbitmq.yaml.j2'

## Create reddis secret

- name: "[REDIS] Redis password secret"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        namespace: '{{ ansible_operator_meta.namespace }}'
        name: '{{ ansible_operator_meta.name }}-redis-secret'
      data:
        password: "{{ redis.password | b64encode }}"

## Create Redis Deployment

- name: "[RABBITMQ] Deploy Rabbitmq"
  kubernetes.core.k8s:
    state: present
    template:
      path: 'deployments/redis.yaml.j2'


## Create Service Account for Squest

- name: "[DJANGO] Create Service Account for Squest"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        namespace: '{{ ansible_operator_meta.namespace }}'
        name: '{{ ansible_operator_meta.name }}-squest-sa'
      automountServiceAccountToken: true

## Create Role to read Batch Jobs

- name: "[DJANGO] Create Job Reader Role"
  kubernetes.core.k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        namespace: '{{ ansible_operator_meta.namespace }}'
        name: '{{ ansible_operator_meta.name }}-job-reader-role'
      rules:
      - verbs: ["list", "watch", "get"]
        apiGroups: ["batch"]
        resources: ["jobs"]

## Create Rolebinding to link service account with job reader role

- name: "[DJANGO] Create RoleBinding"
  kubernetes.core.k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        namespace: '{{ ansible_operator_meta.namespace }}'
        name: '{{ ansible_operator_meta.name }}-job-reader-role'
      subjects:
      - kind: ServiceAccount
        name: '{{ ansible_operator_meta.name }}-squest-sa'
      roleRef:
       apiGroup: rbac.authorization.k8s.io
       kind: Role
       name: '{{ ansible_operator_meta.name }}-job-reader-role'
 
## Check if a previous job exists

- name:  "[DJANGO] Look for old job"
  set_fact:
    existingmigrationjob: "{{ query('kubernetes.core.k8s', kind='Job', namespace=ansible_operator_meta.namespace, label_selector='migrationjob=y', api_version='batch/v1') }}"

## Remove old job if there is one found

- name: "[DJANGO] Remove old migration job"
  when: existingmigrationjob | length>0
  kubernetes.core.k8s:
    state: absent
    api_version: batch/v1
    kind: Job
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ ansible_operator_meta.name }}-django-migrations-job'

## Create Django Configmap, ServiceAccount, Role, RoleBinding, PVC and Migration Job

- name: "[DJANGO] Create Configmap, ServiceAccount, Role, RoleBinding, PVC and Migration Job"
  kubernetes.core.k8s:
    state: present
    template:
      path: 'deployments/django-migrations.yaml.j2'

## Wait until migrations are done

- name: "[DJANGO] Wait until migrations are done"
  kubernetes.core.k8s_info:
    api_version: "batch/v1"
    kind: Job
    name: '{{ ansible_operator_meta.name }}-django-migrations-job'
    namespace: '{{ ansible_operator_meta.namespace }}'
    wait: yes
    wait_sleep: 10
    wait_timeout: 600
    wait_condition:
      type: Complete
      status: "True"

## Create Nginx config

- name: "[DJANGO] Create NGINX config"
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        namespace: '{{ ansible_operator_meta.namespace }}'
        name: '{{ ansible_operator_meta.name }}-django-nginx-cm'
      data:
        nginx.conf: "{{ lookup('ansible.builtin.template', 'nginx.conf.j2') }}"


## Create Maintenance Deployment

- name: "[MAINTENANCE] Create Deployment"
  kubernetes.core.k8s:
    state: present
    template:
      path: 'deployments/maintenance.yaml.j2'

## Create Django Deployment

- name: "[DJANGO] Create Deployment"
  kubernetes.core.k8s:
    state: present
    template:
      path: 'deployments/django-deployment.yaml.j2'

## Wait for deployment to finish

- name: "[DJANGO] Wait until deployment is ready"
  kubernetes.core.k8s_info:
    api_version: "apps/v1"
    kind: Deployment
    name: '{{ ansible_operator_meta.name }}-django'
    namespace: '{{ ansible_operator_meta.namespace }}'
    wait: yes
    wait_sleep: 10
    wait_timeout: 600
    wait_condition:
      type: Available
      status: "True"

## Create Celery Deployment

- name: "[CELERY] Create Deployment"
  kubernetes.core.k8s:
    state: present
    template:
      path: 'deployments/django-celery.yaml.j2'
