---
kind: ConfigMap
apiVersion: v1
metadata:
  name: '{{ ansible_operator_meta.name }}-django-cm'
  namespace: '{{ ansible_operator_meta.namespace }}'
data:
  TZ: "Europe/Paris"
  DB_HOST: '{{ ansible_operator_meta.name }}-mariadb-svc.{{ ansible_operator_meta.namespace }}.svc'
  DB_PORT: "3306"
  REDIS_CACHE_HOST: '{{ ansible_operator_meta.name }}-redis-svc.{{ ansible_operator_meta.namespace }}.svc'
  DEBUG: "true"
  DB_USER: "{{ db.user }}"
  DB_PASSWORD: "{{ db.password }}"
  WAIT_HOSTS: '{{ ansible_operator_meta.name }}-mariadb-svc.{{ ansible_operator_meta.namespace }}.svc:3306,{{ ansible_operator_meta.name }}-rabbitmq-svc.{{ ansible_operator_meta.namespace }}.svc:5672'
  BROKER_URL: 'amqp://rabbitmq:**@{{ ansible_operator_meta.name }}-rabbitmq-svc.{{ ansible_operator_meta.namespace }}.svc:5672/squest'

{% if squest.django.persistence.enabled | bool %}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ ansible_operator_meta.name }}-django-static-pvc
  namespace: {{ ansible_operator_meta.namespace }}
spec:
  storageClassName: {{ squest.django.persistence.storage_class }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ squest.django.persistence.size }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ ansible_operator_meta.name }}-django-media-pvc
  namespace: {{ ansible_operator_meta.namespace }}
spec:
  storageClassName: {{ squest.django.persistence.storage_class }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ squest.django.persistence.size }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ ansible_operator_meta.name }}-squest-backup-pvc
  namespace: {{ ansible_operator_meta.namespace }}
spec:
  storageClassName: {{ squest.django.persistence.storage_class }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ squest.django.persistence.size }}
{% endif %}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: '{{ ansible_operator_meta.name }}-django-migrations-job'
  namespace: '{{ ansible_operator_meta.namespace }}'
spec:
  template:
    backoffLimit: 3
    spec:
{% if db.node_selector %}
      nodeSelector:
        {{ squest.django.node_selector | indent(width=8) }}
{% endif %}
      securityContext:
        fsGroup: 999
      containers:
      - name: django
        envFrom:
        - configMapRef:
            name: '{{ ansible_operator_meta.name }}-django-cm'
        image: '{{ squest.django.image }}'
        command: ['/bin/bash', '-c']
        args: 
        - |
          echo $UID
          echo $USER
          echo ""
          echo "-----------------------------------------------------"                    
          echo "Wait for required services to start"
          /wait
          echo "Applying database migration"
          python manage.py migrate --database=${DATABASE:-default}
          echo ""
          echo "-----------------------------------------------------"
          echo "Collect static files"
          python manage.py collectstatic --noinput
          echo ""
          echo "-----------------------------------------------------"
          echo "Inserting default data"
          python manage.py insert_default_data
{% if squest.django.persistence.enabled | bool %}
        volumeMounts: 
        - name: django-static
          mountPath: /app/static
{% endif %}
      restartPolicy: Never
      volumes:
{% if squest.django.persistence.enabled | bool %}
      - name: django-static
        persistentVolumeClaim:
          claimName: {{ ansible_operator_meta.name }}-django-static-pvc
{% else %}
      - name: django-static
        emptyDir: {}
{% endif %}